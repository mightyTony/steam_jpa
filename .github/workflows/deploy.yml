name: CICD - Github Actions CI & Deploy to EC2

on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: JDK 17 설정
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 그래들 캐싱
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

#      - name: application.yml 만들어서 넣어두기
#        if: contains(github.ref, 'master')
#        run: |
#          cd ./src/main/resources
#          touch ./application.yml
#          echo "${{ secrets.YML }}" > ./application.yml
#        shell: bash

      - name: 그래들류 실행 권한 부여
        run: chmod +x gradlew

      - name: 그래들로 빌드 (no test)
        run: ./gradlew clean build -x test

      - name: 도커허브 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 도커 빌드 & 푸시
        if: contains(github.ref, 'master')
        run: |
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_REPO }}

  deploy:
    needs: CI
    runs-on: ubuntu-latest
    steps:
      - if: ${{ needs.CI.result == 'failure' }}
        run: echo "CI job이 실패했습니다."

      - name: 운영 서버에 배포
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'master')
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          port: 22
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd /home/ec2-user/app/

            mkdir -p infra

#            # docker-compose.yml 복사
#            echo "${{ secrets.DOCKER_COMPOSE_YML }}" > docker-compose.yml

            # application-prod.yml 복사
            echo "${{ secrets.APPLICATION_PROD_YML }}" > application-prod.yml
            
            # docker-compose.yml 전달
            echo "${{ secrets.DOCKER_COMPOSE_YML }}" > infra/docker-compose.yml
  
            # prometheus.yml 전달
            echo "${{ secrets.PROMETHEUS_YML }}" > infra/prometheus.yml
            
            # nginx.conf 전달
            echo "${{ secrets.NGINX_CONF }}" > infra/nginx.conf
  
            cd infra 
            # 기존 컨테이너 중지 및 제거
            sudo docker-compose down

            # 최신 이미지 pull
            sudo docker-compose pull

            # 컨테이너 실행
            sudo docker-compose up -d

            # 사용하지 않는 이미지 삭제
            sudo docker image prune -f
